namespace com.ibm.streamsx.transportation.sample.nextbus ;

// ************************************************************************
// * Copyright (C)2014,2015, International Business Machines Corporation and
// * others. All Rights Reserved.
// ************************************************************************

use com.ibm.streamsx.transportation.nextbus::AgencyVehicleLocationPoll ;
use com.ibm.streamsx.transportation.nextbus::NextBusLocation ;
use com.ibm.streamsx.transportation.nextbus::NextBusHangout ;
use com.ibm.streamsx.transportation.vehicle::IdleVehicleDetection ;
use com.ibm.streamsx.transportation.vehicle::VehicleIdle ;
use com.ibm.streamsx.inet.rest::HTTPTupleView ;
use com.ibm.streamsx.datetime.convert::*;

type MARKER_TYPE = enum { GREEN, YELLOW, RED, WARNING } ;

public composite VehiclePosition
{
    param
          expression<rstring> $agency : getSubmissionTimeValue("agency", "sf-muni");
          expression<float64> $ageOutTime : minutes(15);
          expression<int32> $port : 8080;

	graph
		stream<NextBusLocation> VLX = AgencyVehicleLocationPoll()
		{
			param
				agency : $agency;
				period : (float64) getSubmissionTimeValue("period", "30.0");
		}
		
		        // Last position of each bus, this will be
        // visible on the default map visualization
        // by HTTPTupleView as it has an id, latitude and longitude.
		() as LastPosition = HTTPTupleView(VLX)
		{
			window VLX : sliding, count(1), count(1), partitioned, partitionAge($ageOutTime);
	        param
	          partitionKey: "id";
	          port: $port;
	        config
			   placement: partitionColocation("jetty");
	          
		}
		
	   // Augment with info if the bus has  been idle for 3 minutes
       stream<VLX, VehicleIdle> VLXWithIdle = IdleVehicleDetection(VLX) {
          param minimumIdle: minutes(3);
       }



                // Enriched last position of each bus, this will be
                // also be visible on the default map visualization
                // but has a marker colour specific to the bus's speed
                // and a more informative note.
		stream <VLX,tuple<MARKER_TYPE markerType, rstring note>>
		       MVVL = Functor(VLXWithIdle) {
		       
		       logic state: mutable MARKER_TYPE marker;
		       onTuple VLXWithIdle: {
		          if (idle)
		               marker = MARKER_TYPE.WARNING;
		          else if (speedKmHr > 40.0)
		              marker = MARKER_TYPE.GREEN;
		          else if (speedKmHr == 0.0)
		              marker = MARKER_TYPE.RED;
		          else
		              marker = MARKER_TYPE.YELLOW;
		          }
		       
		       output MVVL:
		          note = routeTag + " (" + id + ") @ "
                                 + ((rstring) speedKmHr) + "km/h"
                                 + (idle ? (" Idle! " + (rstring) duration + "seconds"): ""),
		          markerType = marker;
		}
		
		() as MapViewer = HTTPTupleView(MVVL)
		{
			window MVVL : sliding, count(1), count(1), partitioned, partitionAge($ageOutTime);
		    param
	             port: $port;
	             partitionKey: "id";
	        config
			   placement: partitionColocation("jetty");
		}


		config tracing: info;
}
