
// ************************************************************************
// * Copyright (C)2018, International Business Machines Corporation and
// * others. All Rights Reserved.
// ************************************************************************
namespace com.ibm.streamsx.transportation.geofence.demo;
use com.ibm.streamsx.transportation.nextbus::NextBusLocation ;
use com.ibm.streamsx.topology.topic::Subscribe ;

use com.ibm.streams.geospatial.st::* ;
use com.ibm.streams.geospatial.ext::* ;

/**
 * Circular geofences are comprised of  a point and a radius around that point.
 * The points are defined in poi/pois.csv.
 *  * Add a geofence by adding a new point to poi.csv
 
 * This application subscribes to the data streams exported by PublishBusLocation and GeofenceSource.
 * GeofenceSource : watches the poi directory and publishes a stream of data about the points of interest.
 * PublishBusLocation: connects to nextbus and publishes a stream of bus data.
 * This application will ingest that data, and  print out a message to console whenever a bus is within the desired radius of the points.
 */
public composite CircularGeofencing{



   graph
      stream<NextBusLocation> BusLocationStream = Subscribe()
      {
         param
            topic: "RawBusLocations" ;
            streamType: NextBusLocation;
      }
 		
 		stream<POIType> FixedCoordinates = Subscribe()
      {
         param
            topic: "CurrentPOIs" ;
            streamType: POIType;
      }
       stream<POI_WKT_Type> FixedLocations as O = Functor(FixedCoordinates)
      {
         output
            O : locationWKT = point(longitude, latitude) ;
      }
      
      
      stream<POIMatches> NearbyVehicles as O =
         Custom(BusLocationStream ; FixedLocations as F)
      {
      	logic 
      		state: {
      		//
      			mutable list<POI_WKT_Type> POIList = [];
      		}
      		onTuple F: {
      		//add the POIs to a list
      			appendM(POIList, F);
      		}
      		onTuple BusLocationStream:{
      	  	    rstring busWKT = point(BusLocationStream.longitude,BusLocationStream.latitude);
      			//for each POI
      			for (POI_WKT_Type poi in POIList){
      			//check the distance from the bus' current location to the point
      				float64 distanceFromPOI = distance(busWKT, poi.locationWKT);
      				if (distanceFromPOI < poi.radius){
      					//bus is in geofence
      					mutable POIMatches out = {};
      					
      					out.distance = distanceFromPOI;
      					out.fixedLocationId =  poi.POI_ID;
      					out.message = poi.message;
      					//copy input data to output
      					assignFrom (out, BusLocationStream);
      					
      					submit(out, O);
      				}
      			}
      		
      		}
     }

   
      () as AlertPrinter = Custom(NearbyVehicles as In)
      {
         
         logic
         	onTuple In: {
         	
         		printStringLn( "Bus " + routeTag + " with id " + id +  " is " + (rstring)distance + " meters away from " + fixedLocationId + ", message = " + message); 
         	}
      }

	
}